public with sharing class OnbeWsManageCard {
    //Generated by FuseIT WSDL2Apex
	//Methods Included: payoutAccountInquiry, accountInquiry
	//Methods Excluded: updateAccountProfile, reissueCard, getCommentTypes, closeEscalation, addCommentEscalation, getEscalationAssignees, getCommentCategories, getCommentTypesByCategory
	// Primary Port Class Name: AccountManagement	

	private static final String uriCardManagementMainEndpoint;

	static {
		Proesis_Settings__c orgSettings = Proesis_Settings__c.getOrgDefaults();

		if (orgSettings.OnbePaymentService_CustSvcEndpoint__c != null) {
			uriCardManagementMainEndpoint = orgSettings.OnbePaymentService_CustSvcEndpoint__c;
		} else {
			uriCardManagementMainEndpoint = 'https://webservice-qa.northlane.com:4005/CardManagementV3/services/AccountManagement';
		}
	}

	public class AccountManagement {
		public String endpoint_x = uriCardManagementMainEndpoint;
		public Map<String,String> inputHttpHeaders_x;
		public Map<String,String> outputHttpHeaders_x;
		public String clientCertName_x;
		public String clientCert_x;
		public String clientCertPasswd_x;
		public Integer timeout_x;
		private transient String[] ns_map_type_info = new String[]{'urn:CardManagement','cardmanagement'};
		
        public void accountInquiry(String application_id,
			String card_number, //Card Number string, or pass an empty string if you do not want to pass.
			String puid,  //PUID string, or pass an empty string if you do not want to pass.
		 	String ppd,   //PPD string, or pass an empty string if you do not want to pass.
			String mobile_phone,  // Phone Number string, or pass an empty string if you do not want to pass.
			Integer balance_detail,  // INT 0 indicates no balance information to be returned. 1 to have it returned.
			Integer journal_detail,  // 0 have it returned indicates no transaction history and 2 to have it returned and to set to be returned. 1 to PPID, if any, in the transaction_details response field.
			Integer registration_detail, // Pass 0 for no registration information to be returned, or 1 to have it returned.
			Integer start_date,  // year, month, day. Example: 20090213 would be passed for February 13, 2009. Can pass 0 if you don't want a start date.
			Integer end_date, // Same as above. Can pass 0 if you don't want a end date.
			Integer max_items
		) {
			// OnbeWsManageCard.AccountManagement request_x = new OnbeWsManageCard.AccountManagement();
			OnbeWsManageCard.AccountInquiryRequest request_x = new OnbeWsManageCard.AccountInquiryRequest();
			request_x.application_id = application_id;
			request_x.card_number = card_number;
			request_x.puid = puid;
			request_x.ppd = ppd;
			request_x.mobile_phone = mobile_phone;
			request_x.balance_detail = balance_detail;
			request_x.journal_detail = journal_detail;
			request_x.registration_detail = registration_detail;
			request_x.start_date = start_date;
			request_x.end_date = end_date;
			request_x.max_items = max_items;

			OnbeWsManageCard.AccountManagement response_x;
		    // A map of key-value pairs that represent the response that the external service sends after receiving the request. In each pair, the key is a response identifier. The value is the response object, which is an instance of a type that is created as part of the auto-generated stub class.
			Map<String, OnbeWsManageCard.AccountManagement> response_map_x = new Map<String, OnbeWsManageCard.AccountManagement>();
			response_map_x.put('response_x', response_x);
			WebServiceCallout.invoke(
				this, // stub - An instance of the Apex class that is auto-generated from a WSDL (the stub class).
				request_x, // request - The request to the external service. The request is an instance of a type that is created as part of the auto-generated stub class.
				response_map_x, // response
				new String[]{endpoint_x, //  the URL of the external web service
					'', // The SOAP action.
					uriCardManagementMainEndpoint, // The request namespace.
					'', // The request name.
					uriCardManagementMainEndpoint, // The response namespace.
					'', //  The response name.
					'OnbeWsManageCard.AccountManagement'  // The response type.
				} 
			);
			response_x = response_map_x.get('response_x');
		}
        
		public void payoutAccountInquiry() {
			OnbeWsManageCard.AccountManagement request_x = new OnbeWsManageCard.AccountManagement();
			OnbeWsManageCard.AccountManagement response_x;
		    // A map of key-value pairs that represent the response that the external service sends after receiving the request. In each pair, the key is a response identifier. The value is the response object, which is an instance of a type that is created as part of the auto-generated stub class.
			Map<String, OnbeWsManageCard.AccountManagement> response_map_x = new Map<String, OnbeWsManageCard.AccountManagement>();
			response_map_x.put('response_x', response_x);
			WebServiceCallout.invoke(
				this, // stub - An instance of the Apex class that is auto-generated from a WSDL (the stub class).
				request_x, // request - The request to the external service. The request is an instance of a type that is created as part of the auto-generated stub class.
				response_map_x, // response
				new String[]{ endpoint_x, //  the URL of the external web service
					'', // The SOAP action.
					uriCardManagementMainEndpoint, // The request namespace.
					'', // The request name.
					uriCardManagementMainEndpoint, // The response namespace.
					'', //  The response name.
					'OnbeWsManageCard'
				} // The response type.
			);
			response_x = response_map_x.get('response_x');
		}
		
		private DOM.XmlNode populateDoc(DOM.Document doc){
			String env = 'http://schemas.xmlsoap.org/soap/envelope/';
			String xsi = 'http://www.w3.org/2001/XMLSchema-instance';
			String xsd = 'http://www.w3.org/2001/XMLSchema';
            
			DOM.XmlNode envelope = doc.createRootElement('Envelope', env, 'env');
			envelope.setNamespace('xsd', xsd);
			envelope.setNamespace('xsi', xsi);
			DOM.XmlNode header = envelope.addChildElement('Header', env, '');
			AddHeader(header);
			//System.debug(doc.toXmlString());
			DOM.XmlNode body = envelope.addChildElement('Body', env, '');
			return body;
		}

		private void AddHeader(DOM.XmlNode header){
		}

		public AccountInquiryResponse accountInquiry_Http( String application_id,
			String card_number,
			String puid,
		 	String ppd, 
			String mobile_phone,
			Integer balance_detail, 
			Integer journal_detail, 
			Integer registration_detail, 
			Integer start_date, 
			Integer end_date,
			Integer max_items) {

			DOM.Document doc = new DOM.Document();
			DOM.XmlNode body = populateDoc(doc);
			DOM.XmlNode methodNode = body.addChildElement('accountInquiry', uriCardManagementMainEndpoint, '');			
			
			// http method needs some type of request object which can be populated and passed into the SOAP body element
			OnbeWsManageCard.AccountInquiryRequest request_x = new OnbeWsManageCard.AccountInquiryRequest(application_id, card_number, puid, ppd, mobile_phone,
				balance_detail, journal_detail, registration_detail, start_date, end_date, max_items);
			request_x.populateXmlNode(methodNode);

			HttpRequest req = new HttpRequest();
			req.setEndpoint(endpoint_x);
			req.setMethod('POST');
			req.setHeader('Content-Type', 'text/xml; charset=UTF-8');
          	req.setHeader('SOAPAction', 'blank');
			req.setBodyDocument(doc);
			
			Http http = new Http();
			HttpResponse res = http.send(req);
			
			Dom.Document responseDoc = res.getBodyDocument();
			System.debug(responseDoc.toXmlString());

			Dom.XmlNode rootNode = responseDoc.getRootElement();
			Dom.XmlNode bodyNode = rootNode.getChildElement('Body','http://schemas.xmlsoap.org/soap/envelope/');
			
			return new AccountInquiryResponse(bodyNode);
		}
 
		public void payoutAccountInquiry_Http() {
			DOM.Document doc = new DOM.Document();
			DOM.XmlNode body = populateDoc(doc);
			DOM.XmlNode methodNode = body.addChildElement('payoutAccountInquiry', uriCardManagementMainEndpoint, '');			
			
			HttpRequest req = new HttpRequest();
			req.setEndpoint(endpoint_x);
			req.setMethod('POST');
			req.setHeader('Content-Type', 'text/xml; charset=UTF-8');
			req.setHeader('SOAPAction', 'blank');
			//System.debug(doc.toXmlString());
			req.setBodyDocument(doc);
			//System.debug(req.getBody());
			Http http = new Http();
			HTTPResponse res = http.send(req);
			//System.debug(res.getBody());
			Dom.Document responseDoc = res.getBodyDocument();
			Dom.XmlNode rootNode = responseDoc.getRootElement();
			Dom.XmlNode bodyNode = rootNode.getChildElement('Body','http://schemas.xmlsoap.org/soap/envelope/');
			Dom.XmlNode Node = bodyNode.getChildElement('', uriCardManagementMainEndpoint);
		}

		public ReissueCardResponse reissueCard_Http(
			String application_id,
			String puid,
		 	String block_code
		) {
			DOM.Document doc = new DOM.Document();
			DOM.XmlNode body = populateDoc(doc);
			DOM.XmlNode methodNode = body.addChildElement('reissueCard', uriCardManagementMainEndpoint, '');			
			
			OnbeWsManageCard.ReissueCardRequest request_x = new OnbeWsManageCard.ReissueCardRequest(application_id, puid, block_code);
			request_x.populateXmlNode(methodNode);

			HttpRequest req = new HttpRequest();
			req.setEndpoint(endpoint_x);
			req.setMethod('POST');
			req.setHeader('Content-Type', 'text/xml; charset=UTF-8');
          	req.setHeader('SOAPAction', 'blank');
			req.setBodyDocument(doc);

			Http http = new Http();
			HttpResponse res = http.send(req);

			Dom.Document responseDoc = res.getBodyDocument();
			System.debug(responseDoc.toXmlString());

			Dom.XmlNode rootNode = responseDoc.getRootElement();
			Dom.XmlNode bodyNode = rootNode.getChildElement('Body','http://schemas.xmlsoap.org/soap/envelope/');
			
			return new ReissueCardResponse(bodyNode);
		}
 	}

	public class AccountInquiryRequest {

		// Request
		public String application_id;
		public String card_number;  //Card Number string, or pass an empty string if you do not want to pass.
		public String puid;  //PUID string, or pass an empty string if you do not want to pass.
		public String ppd;   //PPD string, or pass an empty string if you do not want to pass.
		public String mobile_phone;  // Phone Number string, or pass an empty string if you do not want to pass.
		public Integer balance_detail;  // INT 0 indicates no balance information to be returned. 1 to have it returned.
		public Integer journal_detail;  // 0 have it returned indicates no transaction history and 2 to have it returned and to set to be returned. 1 to PPID, if any, in the transaction_details response field.
		public Integer registration_detail; // Pass 0 for no registration information to be returned, or 1 to have it returned.
		public Integer start_date;  // year, month, day. Example: 20090213 would be passed for February 13, 2009. Can pass 0 if you don't want a start date.
		public Integer end_date; // Same as above. Can pass 0 if you don't want a end date.
		public Integer max_items;  // Maximum number of transactions to return. If you pass 0 for start_date and end_date, and 20 for max_items, then you will get the last 20 transactions.There will be an array of transactions returned, up to "max_items".

		public AccountInquiryRequest() {
		}

		public AccountInquiryRequest( String application_id,
			String card_number,
			String puid,
			String ppd,
			String mobile_phone,
			Integer balance_detail,
			Integer journal_detail,
			Integer registration_detail,
			Integer start_date,
			Integer end_date,
			Integer max_items ){
				this.application_id = application_id;
				this.card_number = card_number;
				this.puid = puid;
				this.ppd = ppd;
				this.mobile_phone = mobile_phone;
				this.balance_detail = balance_detail;
				this.journal_detail = journal_detail;
				this.registration_detail = registration_detail;
				this.start_date = start_date;
				this.end_date = end_date;
				this.max_items = max_items;
		}

		public void populateXmlNode(Dom.XmlNode outerNode){
			//System.assertEquals('accountInquiry', outerNode.getName());
			Dom.XmlNode applicationIdNode = outerNode.addChildElement('application_id', uriCardManagementMainEndpoint, '');
			if(this.application_id != null){
				applicationIdNode.addTextNode(this.application_id);
			}
			
			Dom.XmlNode cardNumberNode = outerNode.addChildElement('card_number', uriCardManagementMainEndpoint, '');
			if(this.card_number != null){
				cardNumberNode.addTextNode(this.card_number);
			}
			Dom.XmlNode puidNode = outerNode.addChildElement('puid', uriCardManagementMainEndpoint, '');
			if(this.puid != null){
				puidNode.addTextNode(this.puid);
			}
			Dom.XmlNode ppdNode = outerNode.addChildElement('ppd', uriCardManagementMainEndpoint, '');
			if(this.ppd != null){
				ppdNode.addTextNode(this.ppd);
			}
			Dom.XmlNode mobilePhoneNode = outerNode.addChildElement('mobile_phone', uriCardManagementMainEndpoint, '');
			if(this.mobile_phone != null){
				mobilePhoneNode.addTextNode(this.mobile_phone);
			}
			Dom.XmlNode balanceDetailNode = outerNode.addChildElement('balance_detail', uriCardManagementMainEndpoint, '');
			if(this.balance_detail != null){
				balanceDetailNode.addTextNode(String.valueOf(this.balance_detail));
			}
			Dom.XmlNode journeyDetailNode = outerNode.addChildElement('journey_detail', uriCardManagementMainEndpoint, '');
			if(this.journal_detail != null){
				journeyDetailNode.addTextNode(String.valueOf(this.journal_detail));
			}
			Dom.XmlNode registrationDetailNode = outerNode.addChildElement('registration_detail', uriCardManagementMainEndpoint, '');
			if(this.registration_detail != null){
				registrationDetailNode.addTextNode(String.valueOf(this.registration_detail));
			}
			Dom.XmlNode startDateNode = outerNode.addChildElement('start_date', uriCardManagementMainEndpoint, '');
			if(this.start_date != null){
				startDateNode.addTextNode(String.valueOf(this.start_date));
			}
			Dom.XmlNode endDateNode = outerNode.addChildElement('end_date', uriCardManagementMainEndpoint, '');
			if(this.end_date != null){
				endDateNode.addTextNode(String.valueOf(this.end_date));
			}
			Dom.XmlNode maxItemsNode = outerNode.addChildElement('max_items', uriCardManagementMainEndpoint, '');
			if(this.max_items != null){
				maxItemsNode.addTextNode(String.valueOf(this.max_items));
			}
			// OnbeDomainPrepaid.Link linkObj = this.link;
			// Dom.XmlNode linkNode = outerNode.addChildElement('link', uriCardManagementMainEndpoint, '');
			// if(linkObj != null){
			// 	linkObj.populateXmlNode(linkNode);
			// }
		}
	}

	public class AccountInquiryResponse {
		public Integer code; // Code doesn't seem to be returned either. If it's null, we'll just assume it's successful
		public String message; // OK is returned in the message if successful, otherwise an error message is returned.

		public Decimal balance;
		public String cardNumber4Digits;
		public String expirationMMYYYY;

		public AccountInquiryResponse(Dom.XmlNode node) {
			// See the Test_GetBalance_Request_OnbePayment.apex test script for an example success return

			Dom.XmlNode responseNode = node.getChildElement('accountInquiryResponse', uriCardManagementMainEndpoint);
			if (responseNode == null) {
				this.message = 'Response node not found';
				return;
			}

			Dom.XmlNode returnNode = responseNode.getChildElement('accountInquiryReturn', null);

			String responseBodyNodeId = returnNode.getAttribute('href', null);

			Map<String, Dom.XmlNode> nodeIdToNode = new Map<String, Dom.XmlNode>();
			for(Dom.XmlNode childNode : node.getChildElements()) {
				if (childNode.getAttribute('id', null) != null) {
					nodeIdToNode.put('#' + childNode.getAttribute('id', null), childNode);
				}	
			}

			Dom.XmlNode responseBodyNode = nodeIdToNode.get(responseBodyNodeId);
			if (responseBodyNode == null) {
				this.message = 'Response body node not found';
				return;
			}

			String balanceNodeId = responseBodyNode.getChildElement('balance', null)?.getAttribute('href', null);
			String cardNodeId = responseBodyNode.getChildElement('card', null)?.getAttribute('href', null);
			String responseNodeId = responseBodyNode.getChildElement('response', null)?.getAttribute('href', null);

			Dom.XmlNode diagResponseNode = nodeIdToNode.get(responseNodeId);
			String codeResponseNodeId;

			if (diagResponseNode != null) {
				this.message = diagResponseNode.getChildElement('message', null)?.getText();
				codeResponseNodeId = diagResponseNode.getChildElement('code', null)?.getAttribute('href', null);

				Dom.XmlNode codeResponseNode = nodeIdToNode.get(codeResponseNodeId);
				if (codeResponseNode != null) {
					String codeString = codeResponseNode.getText();

					if (!String.isEmpty(codeString)) {
						this.code = Integer.valueOf(codeString);
					}
				}
			}

			if ((this.code != null && this.code != 0) || (this.message != null && this.message != Constants.ONBE_CUSTOMER_SERVICE_SUCCESS_MESSAGE)) {
				// This indicates an error, so no need to parse the rest of the response, we'll just throw the error in the service class
				return;
			}

			Dom.XmlNode balanceNode = nodeIdToNode.get(balanceNodeId);
			String availableBalanceNodeId = balanceNode.getChildElement('balance_available', null)?.getAttribute('href', null);

			Dom.XmlNode availableBalanceNode = nodeIdToNode.get(availableBalanceNodeId);
			if (availableBalanceNode != null) {
				String balanceString = availableBalanceNode.getText();

				if (!String.isEmpty(balanceString)) {
					this.balance = Decimal.valueOf(balanceString) / 100;
				}
			}

			Dom.XmlNode cardNode = nodeIdToNode.get(cardNodeId);
			if (cardNode != null) {
				this.cardNumber4Digits = cardNode.getChildElement('card_number', null)?.getText();
				this.expirationMMYYYY = cardNode.getChildElement('expiration', null)?.getText();

				if (!String.isEmpty(this.cardNumber4Digits)) {
					this.cardNumber4Digits = this.cardNumber4Digits.right(4);
				}
			}
		}
	}

	public class ReissueCardRequest {
		public String application_id;
		public String puid;
		public String block_code;

		public ReissueCardRequest(
			String application_id,
			String puid,
			String block_code
		){
			this.application_id = application_id;
			this.puid = puid;
			this.block_code = block_code;
		}

		public void populateXmlNode(Dom.XmlNode outerNode) {
			Dom.XmlNode applicationIdNode = outerNode.addChildElement('application_id', uriCardManagementMainEndpoint, '');
			if (this.application_id != null){
				applicationIdNode.addTextNode(this.application_id);
			}
			
			Dom.XmlNode puidNode = outerNode.addChildElement('puid', uriCardManagementMainEndpoint, '');
			if (this.puid != null){
				puidNode.addTextNode(this.puid);
			}

			Dom.XmlNode blockCodeNode = outerNode.addChildElement('block_code', uriCardManagementMainEndpoint, '');
			if (this.block_code != null){
				blockCodeNode.addTextNode(this.block_code);
			}
		}
	}

	public class ReissueCardResponse {
		public Integer code;
		public String message;

		String cardNumber4Digits;
		String expirationMMYYYY;
		String accountStatus;

		public ReissueCardResponse(Dom.XmlNode node) {
			Dom.XmlNode responseNode = node.getChildElement('reissueCardResponse', uriCardManagementMainEndpoint);
			Dom.XmlNode returnNode = responseNode.getChildElement('reissueCardReturn', null);

			String responseBodyNodeId = returnNode.getAttribute('href', null);

			Map<String, Dom.XmlNode> nodeIdToNode = new Map<String, Dom.XmlNode>();
			for(Dom.XmlNode childNode : node.getChildElements()) {
				if (childNode.getAttribute('id', null) != null) {
					nodeIdToNode.put('#' + childNode.getAttribute('id', null), childNode);
				}	
			}

			Dom.XmlNode responseBodyNode = nodeIdToNode.get(responseBodyNodeId);
			if (responseBodyNode == null) {
				this.message = 'Response body node not found';
				return;
			}

			this.message = responseBodyNode.getChildElement('message', null)?.getText();
			String codeResponseNodeId = responseBodyNode.getChildElement('code', null)?.getAttribute('href', null);
			String cardResponseNodeId = responseBodyNode.getChildElement('cardDetail', null)?.getAttribute('href', null);

			Dom.XmlNode codeResponseNode = nodeIdToNode.get(codeResponseNodeId);
			if (codeResponseNode != null) {
				String codeString = codeResponseNode.getText();

				if (!String.isEmpty(codeString)) {
					this.code = Integer.valueOf(codeString);
				}
			}

			if (this.code != null && this.code != 0) {
				// This indicates an error, so no need to parse the rest of the response, we'll just throw the error in the service class
				return;
			}

			if (!String.isEmpty(cardResponseNodeId)) {
				Dom.XmlNode cardResponseNode = nodeIdToNode.get(cardResponseNodeId);
				if (cardResponseNode != null) {
					this.cardNumber4Digits = cardResponseNode.getChildElement('card_number', null)?.getText();
					if (!String.isEmpty(this.cardNumber4Digits)) {
						this.cardNumber4Digits = this.cardNumber4Digits.right(4);
					}

					this.expirationMMYYYY = cardResponseNode.getChildElement('expiration', null)?.getText();
					this.accountStatus = cardResponseNode.getChildElement('account_status', null)?.getText();
				}
			}
		}
	}
}